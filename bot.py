import os
import datetime
import logging
from dotenv import load_dotenv
from telegram import (
    Update, Bot, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ConversationHandler, CallbackContext, filters
)
from yadisk import YaDisk

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
bot = Bot(token=TELEGRAM_TOKEN)
y = YaDisk(token=YANDEX_DISK_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
MODE_SELECT, WAITING_FOR_FILENAME, WAITING_FOR_QUERY = range(3)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# Inline-–∫–Ω–æ–ø–∫–∏
menu_buttons = InlineKeyboardMarkup([
    [InlineKeyboardButton("üì§ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ú–•", callback_data="save_mh")],
    [InlineKeyboardButton("üì§ –ù–í", callback_data="save_nv")],
    [InlineKeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ú–•", callback_data="view_mh")],
    [InlineKeyboardButton("üìÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ù–í", callback_data="view_nv")]
])


async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_buttons)
    return MODE_SELECT


async def handle_menu_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    if data == "save_mh":
        user_state[chat_id] = "–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –º—Ö"
        await query.edit_message_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ '–û—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ú–•'")
        return WAITING_FOR_FILENAME

    elif data == "save_nv":
        user_state[chat_id] = "–Ω–≤"
        await query.edit_message_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ '–ù–í'")
        return WAITING_FOR_FILENAME

    elif data == "view_mh":
        user_state[chat_id] = {"search_folder": "–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –º—Ö"}
        await query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ '–û—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ú–•':")
        return WAITING_FOR_QUERY

    elif data == "view_nv":
        user_state[chat_id] = {"search_folder": "–Ω–≤"}
        await query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ '–ù–í':")
        return WAITING_FOR_QUERY

    else:
        await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return MODE_SELECT


async def handle_image(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id not in user_state or not isinstance(user_state[chat_id], str):
        await update.message.reply_text("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é /start.")
        return MODE_SELECT

    file = await context.bot.get_file(update.message.photo[-1].file_id)
    context.user_data["file"] = file
    await update.message.reply_text("üìÇ –í–≤–µ–¥–∏—Ç–µ –±–µ–π–¥–∂ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    return WAITING_FOR_FILENAME


async def save_image(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if "file" not in context.user_data or chat_id not in user_state:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return MODE_SELECT

    file = context.user_data.pop("file")
    folder_type = user_state.pop(chat_id)
    filename = update.message.text.strip() + ".jpg"
    date_folder = datetime.datetime.now().strftime("%Y-%m-%d")
    yandex_folder = f"disk:/{folder_type}/{date_folder}"
    local_folder = f"images/{date_folder}"
    os.makedirs(local_folder, exist_ok=True)

    if not y.is_dir(yandex_folder):
        y.mkdir(yandex_folder)

    file_path = f"{local_folder}/{filename}"

    try:
        await file.download_to_drive(file_path)
        y.upload(file_path, f"{yandex_folder}/{filename}")

        await update.message.reply_text(
            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ **{filename}** –≤ `{folder_type}/{date_folder}`.",
            reply_markup=menu_buttons
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

    if os.path.exists(file_path):
        os.remove(file_path)

    return MODE_SELECT


async def search_files(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id not in user_state or "search_folder" not in user_state[chat_id]:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return MODE_SELECT

    search_folder = user_state[chat_id]["search_folder"]
    query = update.message.text.strip().lower()
    results = []

    def walk(path):
        try:
            for item in y.listdir(path):
                if item["type"] == "dir":
                    walk(item["path"])
                elif item["type"] == "file" and query in item["name"].lower():
                    results.append(item["path"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ {path}: {e}")

    walk(f"disk:/{search_folder}")

    if not results:
        await update.message.reply_text("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu_buttons)
        user_state.pop(chat_id, None)
        return MODE_SELECT

    if len(results) > 10:
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫
        response = f"üîé –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∞–π–ª–æ–≤ —Å '{query}' –≤ '{search_folder}':\n\n"
        for path in results:
            filename = os.path.basename(path)
            parts = path.strip("/").split("/")
            date = parts[-2] if len(parts) >= 2 else "?"
            response += f"üìÖ `{date}` ‚Äî üìÑ {filename}\n"
        await update.message.reply_text(response, reply_markup=menu_buttons)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
        await update.message.reply_text(
            f"üîé –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–≤—å—é —Å –¥–∞—Ç–æ–π‚Ä¶"
        )
        for path in results:
            filename = os.path.basename(path)
            parts = path.strip("/").split("/")
            date = parts[-2] if len(parts) >= 2 else "?"
            local_path = f"temp_{chat_id}.jpg"

            try:
                y.download(path, local_path)
                with open(local_path, "rb") as photo:
                    caption = f"üìÑ {filename}\nüìÖ `{date}`"
                    await update.message.reply_photo(photo=photo, caption=caption)
                os.remove(local_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é: {e}")
                await update.message.reply_text(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {filename}")

    user_state.pop(chat_id, None)
    await update.message.reply_text("üìã –ú–µ–Ω—é:", reply_markup=menu_buttons)
    return MODE_SELECT



async def cancel(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_state.pop(chat_id, None)
    context.user_data.clear()
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu_buttons)
    return MODE_SELECT


def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MODE_SELECT: [CallbackQueryHandler(handle_menu_button)],
            WAITING_FOR_FILENAME: [
                MessageHandler(filters.PHOTO, handle_image),
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_image),
            ],
            WAITING_FOR_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_files),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.ALL, lambda u, c: u.message.reply_text("üîò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.")))

    logger.info("üöÄ –ë–æ—Ç —Å –º–µ–Ω—é –∏ –ø–æ–∏—Å–∫–æ–º –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
