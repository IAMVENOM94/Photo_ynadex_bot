import os
import datetime
import logging
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackContext
from yadisk import YaDisk

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_DISK_TOKEN = os.getenv("YANDEX_DISK_TOKEN")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
bot = Bot(token=TELEGRAM_TOKEN)
y = YaDisk(token=YANDEX_DISK_TOKEN)

async def handle_image(update: Update, context: CallbackContext):
    try:
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        date_folder = datetime.datetime.now().strftime("%Y-%m-%d")
        yandex_folder = f"disk:/–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –º—Ö/{date_folder}"
        local_folder = f"images/{date_folder}"
        os.makedirs(local_folder, exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        if not y.is_dir(yandex_folder):
            y.mkdir(yandex_folder)

        file_path = f"{local_folder}/{file.file_id}.jpg"
        await file.download_to_drive(file_path)

        y.upload(file_path, f"{yandex_folder}/{file.file_id}.jpg")
        await update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        os.remove(file_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

async def clear_chat(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    message_id = update.message.message_id

    for i in range(10):  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            await context.bot.delete_message(chat_id, message_id - i)
        except Exception:
            pass

    await update.message.reply_text("‚úÖ –ß–∞—Ç –æ—á–∏—â–µ–Ω!", quote=False)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("clear", clear_chat))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    app.run_polling()

if __name__ == "__main__":
    main()
